{"version":3,"sources":["webpack:///src/app/main/component/eco-news/services/eco-news.service.ts","webpack:///src/app/main/image-pathes/single-news-images.ts","webpack:///src/app/main/service/word-declension/word-declension.service.ts"],"names":["EcoNewsService","http","localStorageService","backEnd","backendLink","destroyed$","languageBehaviourSubject","pipe","subscribe","language","get","page","quantity","tags","headers","set","observer","newsDto","next","id","econewsId","params","post","complete","providedIn","singleNewsImages","arrowLeft","ellipse","largeImage","twitter","facebook","linkedIn","WordDeclensionService","count","lastOne","lastTwo","suitableLastNumber","unsuitableLastNumber","suitableLastNumbers","unsuitableLastNumbers","slice","includes"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, Observer, ReplaySubject } from 'rxjs';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { EcoNewsModel, NewsTagInterface } from '../models/eco-news-model';\r\nimport { environment } from '@environment/environment';\r\nimport { EcoNewsDto } from '../models/eco-news-dto';\r\nimport { LocalStorageService } from '@global-service/localstorage/local-storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EcoNewsService implements OnDestroy {\r\n  private backEnd = environment.backendLink;\r\n  private language: string;\r\n  private destroyed$: ReplaySubject<any> = new ReplaySubject<any>(1);\r\n\r\n  constructor(private http: HttpClient, private localStorageService: LocalStorageService) {\r\n    this.localStorageService.languageBehaviourSubject.pipe(takeUntil(this.destroyed$)).subscribe((language) => (this.language = language));\r\n  }\r\n\r\n  public getAllPresentTags(): Observable<Array<NewsTagInterface>> {\r\n    return this.http.get<Array<NewsTagInterface>>(`${this.backEnd}econews/tags/all?lang=${this.language}`);\r\n  }\r\n\r\n  public getEcoNewsListByPage(page: number, quantity: number) {\r\n    return this.http.get(`${this.backEnd}econews?page=${page}&size=${quantity}`);\r\n  }\r\n\r\n  public getNewsListByTags(page: number, quantity: number, tags: Array<string>) {\r\n    return this.http.get(`${this.backEnd}econews/tags?page=${page}&size=${quantity}&tags=${tags}`);\r\n  }\r\n\r\n  public getNewsList(): Observable<any> {\r\n    const headers = new HttpHeaders();\r\n    headers.set('Content-type', 'application/json');\r\n    return new Observable((observer: Observer<any>) => {\r\n      this.http\r\n        .get<EcoNewsDto>(`${this.backEnd}econews`)\r\n        .pipe(take(1))\r\n        .subscribe((newsDto: EcoNewsDto) => {\r\n          observer.next(newsDto);\r\n        });\r\n    });\r\n  }\r\n\r\n  public getEcoNewsById(id: string): Observable<EcoNewsModel> {\r\n    return this.http.get<EcoNewsModel>(`${this.backEnd}econews/${id}?lang=${this.language}`);\r\n  }\r\n\r\n  public getRecommendedNews(id: number): Observable<EcoNewsModel> {\r\n    return this.http.get<EcoNewsModel>(`${this.backEnd}econews/recommended?openedEcoNewsId=${id}`);\r\n  }\r\n\r\n  public getIsLikedByUser(econewsId) {\r\n    return this.http.get(`${this.backEnd}econews/isLikedByUser`, {\r\n      params: {\r\n        econewsId\r\n      }\r\n    });\r\n  }\r\n\r\n  public postToggleLike(id: number) {\r\n    return this.http.post(`${this.backEnd}econews/like?id=${id}`, {});\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n}\r\n","export const singleNewsImages = {\r\n  arrowLeft: 'assets/img/icon/econews/arrow_left.svg',\r\n  ellipse: 'assets/img/icon/econews/ellipse.svg',\r\n  largeImage: 'assets/img/icon/econews/news-default-large.png',\r\n  twitter: 'assets/img/icon/econews/twitter.svg',\r\n  facebook: 'assets/img/icon/econews/facebook.svg',\r\n  linkedIn: 'assets/img/icon/econews/linkedin.svg',\r\n};\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WordDeclensionService {\r\n  setWordDeclension(count: string): string {\r\n    const lastOne = -1;\r\n    const lastTwo = -2;\r\n    const suitableLastNumber = '1';\r\n    const unsuitableLastNumber = '11';\r\n    const suitableLastNumbers = '234';\r\n    const unsuitableLastNumbers = ['12', '13', '14'];\r\n    if (count.slice(lastOne) === suitableLastNumber && count.slice(lastTwo) !== unsuitableLastNumber) {\r\n      return 'a';\r\n    }\r\n    if (suitableLastNumbers.includes(count.slice(lastOne)) && !unsuitableLastNumbers.includes(count.slice(lastTwo))) {\r\n      return 'b';\r\n    }\r\n    return '';\r\n  }\r\n}\r\n"]}